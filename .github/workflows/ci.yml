name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: 静的解析
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: 依存関係のインストール
        run: npm ci --legacy-peer-deps
      - name: ESLint の実行
        run: npm run lint

  test:
    name: テスト
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: 依存関係のインストール
        run: npm ci --legacy-peer-deps
      - name: Jest テストの実行
        run: npm test
      - name: カバレッジレポートの生成
        run: npm run test:coverage
      - name: カバレッジレポートのアップロード
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  e2e-test:
    name: E2Eテスト
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: 依存関係のインストール
        run: npm ci --legacy-peer-deps
      - name: Playwright のインストール
        run: npx playwright install --with-deps chromium
      - name: ビルド
        run: npm run build
      - name: E2E テストの実行
        run: npx playwright test --project=chromium

  build:
    name: ビルド
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    steps:
      - uses: actions/checkout@v4
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: 依存関係のインストール
        run: npm ci --legacy-peer-deps
      - name: アプリケーションのビルド
        run: npm run build
      - name: ビルド成果物のアップロード
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/

  # Vercelへのデプロイはプロジェクト設定に依存するため、実装例として記載
  # 実際には Vercel と GitHub の連携設定が必要
  # deploy:
  #   name: デプロイ
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Node.js のセットアップ
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Vercel CLI のインストール
  #       run: npm install -g vercel
  #     - name: 依存関係のインストール
  #       run: npm ci --legacy-peer-deps
  #     - name: ビルド成果物のダウンロード
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-output
  #         path: .next/
  #     - name: Vercel へのデプロイ
  #       run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }} 